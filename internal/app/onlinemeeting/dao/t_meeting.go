// =================================================================================
// This file is auto-generated by the GoFrame CLI tool. You may modify it as needed.
// =================================================================================

package dao

import (
	"context"
	"fmt"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/errors/gerror"
	"github.com/tiger1103/gfast/v3/internal/app/onlinemeeting/dao/internal"
	"github.com/tiger1103/gfast/v3/internal/app/onlinemeeting/model/entity"
)

// tMeetingDao is the data access object for the table t_meeting.
// You can define custom methods on it to extend its functionality as needed.
type tMeetingDao struct {
	*internal.TMeetingDao
}

var (
	// TMeeting is a globally accessible object for table t_meeting operations.
	TMeeting = tMeetingDao{internal.NewTMeetingDao()}
)

// Add your custom methods and functionality below.
func (t tMeetingDao) GetFieldsByRoomID(ctx context.Context, roomNumber string, fields []interface{}) (res *entity.MeetingDB, err error) {
	m := t.Ctx(ctx).Where(TMeeting.Columns().RoomNumber, roomNumber)
	count, err := m.Count()
	if err != nil {
		return nil, gerror.New(fmt.Sprintf("dao.GetFieldsByRoomID: %v", err.Error()))
	}
	if count == 0 {
		return nil, gerror.New("dao.GetFieldsByRoomID: 数据不存在")
	}

	res = &entity.MeetingDB{}
	err = m.FieldsEx(TMeeting.Columns().Id).Scan(&res)
	if err != nil {
		return nil, gerror.New(fmt.Sprintf("dao.GetFieldsByRoomID: %v", err.Error()))
	}
	return
}

func (t tMeetingDao) GetByRoomID(ctx context.Context, roomNumber string, fields []interface{}) (res *entity.MeetingDB, err error) {
	res = &entity.MeetingDB{}

	err = t.Ctx(ctx).Where(TMeeting.Columns().RoomNumber, roomNumber).Scan(&res)
	if err != nil {
		err = gerror.New(fmt.Sprintf("tMeetingDao.GetByRoomID: %v", err.Error()))
		return
	}
	res.Members, err = TMeetingParticipant.GetByRoomNumber(ctx, roomNumber)

	return
}

func (t tMeetingDao) CheckExists(ctx context.Context, roomNumber string) (exists bool, err error) {
	m := t.Ctx(ctx).Where(TMeeting.Columns().RoomNumber, roomNumber)
	count, err := m.Count()
	if err != nil {
		return
	}

	return count != 0, nil
}

func (t tMeetingDao) GetStatusByRoomNumber(ctx context.Context, roomNumber string) (status int, err error) {
	var val gdb.Value
	val, err = t.Ctx(ctx).Where(TMeeting.Columns().RoomNumber, roomNumber).Fields(TMeeting.Columns().Status).Value()
	if err != nil {
		return
	}

	status = val.Int()

	return
}
